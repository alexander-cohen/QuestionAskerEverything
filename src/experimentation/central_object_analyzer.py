from runner_numpy import *
import math
import scipy.stats as scistats
import scipy.spatial.distance as scidist

indeces = [30, 8, 31, 8, 31, 14, 15, 14, 14, 8, 25, 25, 25, 25, 4, 4, 5, 5, 5, 5, 28, 28, 28, 28, 28, 5, 1, 5, 5, 5, 13, 13, 13, 13, 13, 2, 2, 2, 17, 17, 26, 17, 27, 2, 2, 17, 17, 17, 17, 17, 22, 23, 22, 22, 22, 0, 21, 0, 0, 0, 1, 20, 5, 11, 1, 7, 4, 5, 30, 6, 3, 27, 1, 13, 11, 20, 15, 13, 22, 20, 27, 13, 11, 3, 18, 3, 10, 14, 7, 3, 0, 23, 15, 0, 18, 25, 20, 15, 11, 1, 13, 2, 26, 22, 1, 23, 30, 29, 30, 0, 5, 28, 2, 18, 2, 31, 11, 2, 1, 13, 3, 13, 23, 22, 10, 6, 21, 26, 31, 21, 4, 27, 10, 4, 5, 7, 1, 17, 20, 17, 4, 25, 7, 3, 0, 6, 11, 23, 3, 11, 11, 20, 20, 21, 4, 16, 20, 15, 13, 1, 23, 15, 3, 4, 2, 3, 21, 22, 15, 22, 25, 17, 15, 11, 11, 4, 16, 9, 0, 25, 3, 1, 9, 7, 23, 20, 1, 11, 31, 18, 15, 25, 7, 18, 28, 16, 18, 29, 20, 26, 25, 7, 10, 1, 11, 1, 7, 9, 27, 9, 25, 19, 10, 28, 2, 27, 17, 11, 2, 6, 8, 22, 27, 14, 8, 3, 16, 10, 19, 10, 13, 2, 6, 25, 15, 25, 5, 3, 23, 2, 1, 1, 17, 24, 1, 22, 29, 21, 15, 8, 14, 0, 21, 29, 18, 22, 16, 10, 15, 22, 28, 3, 15, 26, 11, 17, 29, 7, 29, 15, 1, 16, 1, 28, 18, 1, 27, 23, 10, 26, 7, 13, 2, 27, 11, 8, 8, 5, 0, 13, 3, 1, 17, 18, 2, 13, 17, 19, 11, 6, 22, 1, 17, 3, 30, 0, 12, 19, 7, 6, 30, 6, 25, 10, 20, 29, 3, 0, 31, 20, 13, 21, 23, 31, 16, 9, 2, 18, 3, 7, 13, 8, 8, 1, 1, 7, 30, 4, 10, 21, 2, 18, 4, 31, 29, 4, 15, 11, 22, 15, 11, 3, 20, 5, 3, 20, 8, 20, 3, 17, 23, 24, 30, 18, 4, 23, 6, 15, 3, 20, 15, 21, 25, 4, 2, 25, 25, 29, 16, 23, 12, 1, 23, 6, 6, 16, 10, 4, 12, 3, 11, 1, 22, 15, 1, 26, 8, 14, 16, 1, 3, 11, 27, 2, 16, 12, 20, 29, 18, 3, 13, 11, 29, 6, 27, 24, 1, 6, 19, 28, 24, 30, 16, 0, 27, 7, 5, 2, 21, 30, 4, 3, 3, 4, 1, 19, 1, 0, 4, 5, 2, 27, 26, 15, 11, 2, 0, 27, 20, 17, 7, 10, 23, 3, 13, 29, 1, 22, 15, 17, 20, 18, 3, 11, 12, 1, 7, 15, 25, 26, 20, 11, 31, 6, 23, 19, 15, 13, 13, 11, 19, 2, 5, 11, 27, 10, 5, 26, 6, 30, 22, 7, 28, 4, 20, 20, 4, 22, 3, 1, 3, 6, 12, 2, 28, 13, 3, 2, 20, 4, 11, 13, 29, 29, 21, 16, 9, 23, 1, 3, 16, 28, 25, 7, 13, 1, 27, 13, 4, 30, 5, 7, 6, 19, 30, 7, 18, 20, 9, 3, 29, 5, 10, 16, 15, 6, 27, 25, 9, 13, 2, 3, 1, 29, 15, 3, 1, 0, 4, 16, 7, 27, 15, 27, 28, 22, 14, 28, 27, 18, 25, 6, 3, 16, 22, 27, 9, 22, 4, 17, 1, 4, 12, 6, 5, 6, 11, 17, 6, 6, 19, 25, 25, 24, 19, 9, 30, 12, 27, 11, 11, 28, 29, 18, 20, 29, 27, 17, 14, 25, 4, 23, 9, 14, 9, 6, 31, 24, 8, 18, 6, 25, 18, 2, 26, 8, 13, 15, 25, 18, 24, 20, 24, 28, 7, 30, 6, 22, 8, 20, 31, 6, 28, 28, 13, 6, 24, 29, 22, 1, 29, 1, 20, 30, 27, 0, 7, 18, 11, 30, 7, 1, 26, 11, 22, 15, 25, 21, 3, 2, 6, 29, 19, 16, 9, 14, 12, 0, 8, 15, 17, 11, 2, 22, 4, 0, 13, 30, 29, 7, 11, 7, 9, 12, 18, 4, 2, 7, 31, 6, 4, 27, 8, 23, 13, 2, 31, 16, 10, 27, 18, 11, 0, 30, 3, 4, 24, 16, 2, 10, 3, 26, 6, 30, 12, 24, 27, 19, 2, 14, 30, 3, 25, 27, 28, 4, 16, 4, 18, 24, 16, 6, 19, 12, 24, 20, 15, 20, 11, 1, 17, 17, 5, 15, 25, 19, 6, 12, 30, 31, 6, 18, 8, 12, 24, 19, 4, 4, 18, 31, 27, 4, 2, 5, 11, 3, 11, 25, 23, 11, 26, 0, 11, 18, 10, 30, 14, 17, 19, 25, 0, 2, 20, 27, 2, 5, 15, 29, 15, 2, 30, 3, 4, 12, 16, 24, 3, 25, 11, 29, 1, 4, 4, 19, 20, 26, 3, 13, 3, 28, 4, 9, 3, 13, 31, 4, 8, 11, 6, 16, 18, 11, 13, 2, 18, 7, 18, 31, 7, 8, 11, 28, 4, 22, 5, 9, 24, 12, 6, 29, 7, 7, 17, 1, 18, 16, 13, 28, 23, 23, 14, 0, 6, 2, 25, 23, 14, 28, 17, 5, 7, 1, 15, 3, 15, 11, 5, 18, 18, 27, 6, 20, 0, 15, 29, 16, 10, 9, 18, 27, 25, 11, 6, 17, 15, 0, 24, 6, 15, 21, 15, 19, 7, 1, 0, 10, 0, 6, 2, 7, 12, 1, 20, 30, 15, 27, 20, 22, 20, 10, 5, 13, 31, 20, 21, 21, 19, 15, 16, 12, 4, 3, 7, 27, 19, 28, 3, 2, 25, 13, 8, 19, 15, 3, 27, 27, 23, 26, 15, 18, 31, 11, 22, 25, 13, 2, 18, 13, 28, 25, 16, 0, 20, 1, 1, 1, 3, 20, 31, 15, 31, 8, 4, 12, 0, 30, 23, 27, 27, 15, 22, 18, 9, 1, 6, 6, 1, 6, 5, 30, 31, 31, 31, 31, 31, 2, 13, 11, 16, 13]
person_items = [[572, 310, 115, 384], [619, 718, 392, 747], [497, 980, 256, 818], [160, 552, 266, 169], [426, 57, 20, 749], [825, 608, 170, 379], [935, 789, 946, 638], [11, 182, 67, 46], [531, 747, 29, 969], [235, 604, 665, 794], [522, 530, 124, 455], [717, 79, 861, 513], [912, 417, 465, 403], [918, 748, 87, 560], [885, 728, 358, 905], [74, 743, 73, 851], [195, 835, 823, 681], [525, 886, 492, 322], [730, 462, 347, 824], [489, 53, 823, 776], [225, 937, 63, 157], [857, 722, 184, 723], [404, 923, 33, 444]]

print [[items[i] for i in r] for r in person_items]

allclusts = [np.where(np.array(indeces) == val)[0] for val in list(set(indeces))]
for elem in allclusts:
	#print list(elem)
	pass

def evaluate_centrality(object, clust):
	sumcentrality = 0
	for elem in clust:
		dist = scidist.correlation(data_matrix[elem], data_matrix[object])
		#print pearson
		sumcentrality += math.e**(-10*(dist**2))

	return sumcentrality / float(len(clust))

centralities = [[] for x in range(len(allclusts))]
centralities_byindex = [0 for x in range(len(indeces))]
for c, i in zip(allclusts, range(1000)):
	clust_centralities = [0 for x in range(len(c))]
	for elem, j in zip(c, range(1000)):
		centrality = evaluate_centrality(elem, c)
		clust_centralities[j] = centrality
		centralities_byindex[elem] = centrality

	centralities[i] =  clust_centralities

person_items_centralities = [[0 for c in range(len(r))] for r in person_items]

for r in range(len(person_items_centralities)):
	for c in range(len(person_items_centralities[r])):
		person_items_centralities[r][c] = centralities_byindex[indeces[person_items[r][c]]]

all_people_scored = [  sorted([(items[r1[i]], "{:.3}".format(r2[i]), indeces[r1[i]]) for i in range(len(r1))], key = lambda x: -float(x[1])) for r1, r2 in zip(person_items, person_items_centralities)]

for r in sorted(all_people_scored, key = lambda x: x[0][2]):
	print r



print '\n\n'
central_items = []
for clust, cent in zip(allclusts, centralities):
	itm = clust[np.argmin(np.array(cent))]
	central_items.append(itm)
	print items[itm]	
	#print [items[elem] for elem in clust]
	print sorted([(items[clust[itm]], cent[itm]) for itm in range(len(clust))], key = lambda x: x[1])
	#print cent

	

	print '\n'

print '\n\n'
print [items[i] for i in central_items]
#print central_items